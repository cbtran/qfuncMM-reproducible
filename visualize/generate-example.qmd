---
title: "Generate data and run analysis"
format: html
---

This document shows how to generate simulated data from three brain regions with an arbitrary number of voxels and time points.
We then run the analysis on the simulated data using the `qfuncMM` package.

```{r}
#| include: false
library(qfuncMM)
library(kableExtra)
source("../R_files/generate_3_region.R")
```

# Setup
Generate the voxel coordinates

```{r}
set.seed(100)

voxel_coords <- vector(mode = "list", length = 3)
voxel_coords[[1]] <- sample(1:10, 3 * 7, replace = TRUE) |>
                       matrix(ncol = 3, dimnames = list(NULL, c("x", "y", "z")))
voxel_coords[[2]] <- sample(1:10, 3 * 7, replace = TRUE) |>
                       matrix(ncol = 3, dimnames = list(NULL, c("x", "y", "z")))
voxel_coords[[3]] <- sample(1:10, 3 * 7, replace = TRUE) |>
                       matrix(ncol = 3, dimnames = list(NULL, c("x", "y", "z")))
```

Regions 1, 2, and 3 have 7 voxels each, with the following coordinates:

```{r}
#| echo: FALSE
knitr::kables(list(
    kable(caption = "Region 1", voxel_coords[[1]]) |> kable_styling(),
    kable(caption = "Region 2", voxel_coords[[2]]) |> kable_styling(),
    kable(caption = "Region 3", voxel_coords[[3]]) |> kable_styling()
)) |> kable_styling()
```

Determine the true parameters.
```{r}
region_parameters <- data.frame(
    phi_gamma = c(1, 1.1, 1.2),
    tau_gamma = c(1/2, 1/3, 1/4),
    k_gamma = c(2.3, 2.1, 2.1),
    nugget_gamma = c(0.05, 0.05, 0.05),
    mean = c(-10, 1, 10),
    row.names = c("region1", "region2", "region3")
)

shared_parameters <- c(tau_eta = 1/3, k_eta = 0.2, nugget = 0.1)

corr_true <- c(rho12 = 0.2, rho13 = 0.35, rho23 = 0.9)
```

# Generation

Generate 1 dataset with 20 time points.
`sim` is a list of length 3, with each element being a 20 x `n_voxel` matrix representing the voxel time series for each region.
```{r}
sim <- generate_3_region(1, voxel_coords, 20, corr_true, region_parameters, shared_parameters)
str(sim)
```

# Analysis

Run the analysis on the simulated data.
```{r}
fit <- qfuncmm(sim, voxel_coords, n_basis = 10)
fit
```